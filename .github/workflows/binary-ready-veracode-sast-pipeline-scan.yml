name: Binary Ready - Veracode Static Code Analysis

run-name: Binary Ready - Static Code Analysis - ${{ github.event.client_payload.repository.name }}

concurrency:
  group: ${{ github.event.client_payload.event_type }}-${{ github.event.client_payload.repository.name }}-${{ github.event.client_payload.repository.branch }}
  cancel-in-progress: true

on:
  repository_dispatch:
    types: [binary-ready-veracode-sast-pipeline-scan]

jobs:
  register:
    uses: ./.github/workflows/veracode-check-run.yml
    with:
      check_run_name: ${{ github.workflow }}
      head_sha: ${{ github.event.client_payload.sha }}
      repositroy_owner: ${{ github.event.client_payload.repository.owner }}
      repositroy_name: ${{ github.event.client_payload.repository.name }}
      event_type: ${{ github.event.client_payload.event_type }}
      github_token: ${{ github.event.client_payload.token }}
      run_id: ${{ github.run_id }}
      branch: ${{ github.event.client_payload.repository.branch }}
        
  pipeline_scan:
    needs: register
    runs-on: ubuntu-latest
    steps:
    - name: Download artifact
      id: download-artifact
      uses: actions/download-artifact@v4
      with:
        github-token: ${{ github.event.client_payload.token }}
        repository: ${{ github.event.client_payload.repository.full_name }}
        run-id: ${{ github.event.client_payload.run_id }}

    - name: Get the name of the downloaded files
      run: |
        artifact_file=$(ls -1 ./veracode-artifact | head -n 1)
        echo "veracode_artifact=$artifact_file" >> $GITHUB_ENV

    - name: Veracode Pipeline-Scan
      id: pipeline-scan
      uses: veracode/Veracode-pipeline-scan-action@v1.0.10
      with:
        vid: ${{ secrets.VERACODE_API_ID }}
        vkey: ${{ secrets.VERACODE_API_KEY }}
        veracode_policy_name: ${{ inputs.policy_name }}
        file: ./veracode-artifact/${{ env.veracode_artifact }}
        fail_build: true

  results_to_security_tab:
    needs: pipeline_scan
    runs-on: ubuntu-latest
    if: ${{ failure() && inputs.create_code_scanning_alert }}
    name: Send report to Security tab
    steps:
      - name: Get scan results
        uses: actions/download-artifact@v3
        with:
          name: "Veracode Pipeline-Scan Results"
      - name: Convert pipeline scan output to SARIF format
        id: convert
        uses: Veracode/veracode-pipeline-scan-results-to-sarif@v2.0.0
        with:
          pipeline-results-json: filtered_results.json
          output-results-sarif: veracode-results.sarif
          repo_owner: ${{ inputs.owner }}
          repo_name: ${{ inputs.repo }}
          commitSHA: ${{ inputs.sha }}
          ref: ${{ inputs.ref }}
          githubToken: ${{ inputs.token }}

# This step will import the flaws from the step above
  create-issues:
    needs: pipeline_scan
    if: ${{ inputs.create_issue && failure()}}
    runs-on: ubuntu-latest
    name: Send report to issue tab
    steps:
      - name: Get scan results
        uses: actions/download-artifact@v3
        with:
          name: 'Veracode Pipeline-Scan Results'
      - name: Create flaws as issues
        uses: veracode/veracode-flaws-to-issues@v2.2.22
        with:
          scan-results-json: 'filtered_results.json'
          repo_owner: ${{ inputs.owner }}
          repo_name: ${{ inputs.repo }}
          github-token: ${{ inputs.token }}
